#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  branches:
    include:
      - "main"
  paths:
    include:
      - build/azDevOps/*
      - build/taskctl/*
      - deploy/terraform/azure/*

trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - build/azDevOps/*
      - build/taskctl/*
      - deploy/terraform/azure/*

# Configure parameters for running the build
parameters:
  - name: deploy
    displayName: Deploy Environment
    type: boolean
    default: true
  - name: destroy
    displayName: Destroy Environment
    type: boolean
    default: false
  - name: upload
    displayName: Upload generated files
    type: boolean
    default: false
  - name: force_deploy
    displayName: Force deploy regardless of branch
    type: boolean
    default: false
  - name: pre_release
    displayName: Create a pre-release from feature branch
    type: boolean
    default: false
  - name: run_docs
    displayName: Run Docs Tasks?
    type: boolean
    default: false

  - name: stages
    type: object
    default:
      - stage: NonProd
        dependsOn: Build
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')
        environment_shortname: nonprod
        deployment_infra: InfraNonProd
        deployment_apps: ACANonProd
      - stage: Prod
        dependsOn: Build
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        environment_shortname: prod
        deployment_infra: InfraProd
        deployment_apps: ACAProd

  - name: debug
    displayName: Turn on debug for the Independent Runner
    type: boolean
    default: false
variables:
  - template: pipeline-vars.yml
  - name: tf_state_key
    value: $(domain)_core

  - name: CHEF_LICENSE
    value: accept-silent

  # Versioning
  - name: version_major
    value: 0
  - name: version_minor
    value: 1
  - name: version_revision
    value: $[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]
  - name: version_number
    value: "$(version_major).$(version_minor).$(version_revision)-${{ lower(variables['Build.SourceBranchName']) }}"

stages:
  - stage: Build
    jobs:
      - job: Setup
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - template: ./templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: "TaskCTL: Setup"
            inputs:
              targetType: inline
              script: taskctl setup
            env:
              DOCKER_IMAGE_TAG: $(version_number)

          - task: Bash@3
            displayName: "TaskCTL: Lint"
            inputs:
              targetType: inline
              script: taskctl lint
            env:
              TF_FILE_LOCATION: /app/deploy/terraform/azure
              CLOUD_PLATFORM: "$(cloud_platform)"

          # Create the documentation for the repo
          - ${{ if eq(parameters.run_docs, true) }}:
            - task: Bash@3
              displayName: Documentation
              inputs:
                targetType: inline
                script: |
                  taskctl docs
              env:
                DOCKER_IMAGE_TAG: $(version_number)

          # Upload the documentation as a build artifact
          - ${{ if eq(parameters.run_docs, true) }}:
            - task: PublishBuildArtifacts@1
              displayName: Publish Documentation
              inputs:
                pathToPublish: $(Build.SourcesDirectory)/outputs/docs
                artifactName: docs


  # Called Non-Prod instead of Dev as all Non-Production stages will deploy to here
  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.stage }}
        dependsOn: ${{ stage.dependsOn }}
        condition: and(succeeded(), or(${{ stage.condition }}, ${{ parameters.force_deploy }}))
        variables:
          - group: stacks-credentials-nonprod-kv
        jobs:
          - deployment: ${{ stage.deployment_infra }}
            environment: ${{ variables.domain }}-${{ stage.environment_shortname }}
            pool:
              vmImage: $(pool_vm_image)

            strategy:
              runOnce:
                deploy:
                  steps:
                    - template: ./templates/setup.yml
                      parameters:
                        TaskctlVersion: ${{ variables.TaskctlVersion }}

                    # Create a tfvars file for the values
                    # This is so that variables can be set and reused as required
                    - task: Bash@3
                      displayName: Create Terraform variables file
                      inputs:
                        targetType: inline
                        script: |
                          taskctl infra:vars
                      env:
                        TASKCTL_DEBUG: ${{ lower(parameters.debug) }}
                        TF_FILE_LOCATION: /app/deploy/terraform/azure
                        TF_VAR_name_company: $(company)
                        TF_VAR_name_project: $(project)
                        TF_VAR_name_component: $(domain)
                        TF_VAR_stage: ${{ stage.environment_shortname }}
                        TF_VAR_location: $(region)

                    # Upload the Terraform variables file and the plan for debugging
                    - ${{ if eq(parameters.upload, true) }}:
                        - template: ./templates/upload.yml

                    # Remove the infrastructure if the parameter has been set
                    - ${{ if eq(parameters.destroy, true) }}:
                        - task: Bash@3
                          displayName: Destroy environment
                          inputs:
                            targetType: inline
                            script: |
                              taskctl infrastructure_destroy
                          env:
                            CLOUD_PLATFORM: "$(cloud_platform)"
                            ARM_TENANT_ID: $(azure-tenant-id)
                            ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                            ARM_CLIENT_ID: $(azure-client-id)
                            ARM_CLIENT_SECRET: $(azure-client-secret)
                            TF_FILE_LOCATION: /app/deploy/terraform/azure
                            TF_BACKEND_INIT: "key=$(tf_state_key),container_name=$(tf_state_container),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg)"
                            TF_BACKEND_DESTROY_PLAN: "-input=false,-out=\"destroy\""
                            TF_VAR_name_environment: ${{ stage.environment_shortname }}

                    # Create the resources
                    - ${{ if eq(parameters.deploy, true) }}:
                        - task: Bash@3
                          displayName: Deploy environment
                          inputs:
                            targetType: inline
                            script: |
                              taskctl infrastructure
                          env:
                            CLOUD_PLATFORM: "$(cloud_platform)"
                            ARM_TENANT_ID: $(azure-tenant-id)
                            ARM_SUBSCRIPTION_ID: $(azure-subscription-id)
                            ARM_CLIENT_ID: $(azure-client-id)
                            ARM_CLIENT_SECRET: $(azure-client-secret)
                            TF_FILE_LOCATION: /app/deploy/terraform/azure
                            TF_BACKEND_INIT: "key=$(tf_state_key),container_name=$(tf_state_container),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg)"
                            TF_BACKEND_PLAN: "-input=false,-out=\"tfplan\""
                            TF_VAR_name_environment: ${{ stage.environment_shortname }}

                    # Perform infrastructure tests
                    - ${{ if eq(parameters.deploy, true) }}:
                        - template: ./templates/infra-tests.yml
                          parameters:
                            CHEF_LICENSE: $(CHEF_LICENSE)
                            INSPEC_FILES: /app/deploy/tests
                            REPORT_FILENAME: inspec_azure_aca.xml
                            TF_FILE_LOCATION: /app/deploy/terraform/azure
                            TF_VAR_name_environment: ${{ stage.environment_shortname }}
                            TF_VAR_location: $(region)
                            AZURE_TENANT_ID: $(azure-tenant-id)
                            AZURE_SUBSCRIPTION_ID: $(azure-subscription-id)
                            AZURE_CLIENT_ID: $(azure-client-id)
                            AZURE_CLIENT_SECRET: $(azure-client-secret)

                    - ${{ if eq(parameters.deploy, true) }}:
                        - task: PublishTestResults@2
                          inputs:
                            testResultsFormat: JUnit
                            testResultsFiles: outputs/tests/inspec_azure_aca.xml
                            testRunTitle: Terraform ACA Tests
                            failTaskOnFailedTests: true

  - stage: Release
    dependsOn:
      - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - NonProd
      - ${{ else }}:
          - Prod
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(${{ parameters.pre_release }}, true)))
    variables:
      - group: github-creds   #amido-stacks-webapp
      - name: version_number
        value: "$(version_major).$(version_minor).$(version_revision)"
    jobs:
      - job: CreateGitHubRelease
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - template: ./templates/setup.yml
            parameters:
              TaskctlVersion: ${{ variables.TaskctlVersion }}

          - task: Bash@3
            displayName: Publish Release
            inputs:
              targetType: inline
              script: |
                taskctl release
            env:
              STAGE: "release"
              PUBLISH_RELEASE: "true"
              GITHUB_TOKEN: "$(API_KEY)"
              ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
                PRERELEASE: "true"
